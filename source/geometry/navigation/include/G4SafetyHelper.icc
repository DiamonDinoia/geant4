//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4SafetyHelper inlined function members implementation
//
// Author:  John Apostolakis (CERN), 5 July 2006
// ----------------------------------------------------------------------------

inline G4int G4SafetyHelper::SetVerboseLevel( G4int lev )
{
  G4int oldlv = fVerbose;
  fVerbose = lev;
  return oldlv;
} 

inline
void G4SafetyHelper::EnableParallelNavigation(G4bool parallel) 
{
  fUseParallelGeometries = parallel;
} 

inline
G4VPhysicalVolume* G4SafetyHelper::GetWorldVolume()
{
  return fpMassNavigator->GetWorldVolume();
}

inline
void G4SafetyHelper::SetCurrentSafety(G4double val, const G4ThreeVector& pos)
{
  fLastSafety = val;
  fLastSafetyPosition = pos;
}
